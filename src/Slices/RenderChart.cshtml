@using Microsoft.AspNetCore.Html;
@inherits RazorSliceHttpResult<Queuesim.SimResults?>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Queuesim</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        async function drawChart(results) {
            const ctx = document.getElementById('myChart');
            const queueDepths = results.queueDepths;
            const running = results.running;
            const labels = queueDepths.map((x, i) => i);
            const data = {
                labels: labels,
                datasets: [{
                    label: 'Queue Depth',
                    data: queueDepths,
                    fill: false,
                    borderColor: 'rgb(75, 192, 192)',
                },
                {
                    label: 'Running',
                    data: running,
                    fill: false,
                    borderColor: 'rgb(192, 75, 75)',
                }]
            };

            new Chart(ctx, {
                type: 'line',
                data: data,
                options: {
                    scales: {
                        x: {
                            text: 'Timestamp (min)'
                        },
                        y: {
                            text: 'Items in Queue'
                        }
                    }
                }
            });
        }
    </script>
    <style>
        .formEntry {
            display: block;
        }
    </style>
</head>

<body>
    <div style="width:80%;margin:auto;">
        <h1>QueueSim</h1>
        <form style="width:100%;max-width 800px;display:block;" action="/run" method="get">
            <span class="formEntry">
                <label>Workers</label>
                <input name="workers" type="number" value="@(Model == null ? 1 : @Model.Workers)" />
            </span>
            <span class="formEntry">
                <label>Jobs to submit</label>
@if (Model == null)
{
                <textarea style="display:block;width:50em;height:5em;" name="jobData">
[
    {&quot;startTime&quot;: 0, &quot;manualJobs&quot;: [5, 5, 5] },
    {&quot;startTime&quot;: 3, &quot;manualJobs&quot;: [3, 2, 1] },
]
                </textarea>
}
else
{
                <textarea style="display:block;width:50em;height:5em;" name="jobData">
@Model.JobData
                </textarea>
}
            </span>
            <button style="float:left;">Run sim</button>
        </form>
        <canvas id="myChart"></canvas>
        @if (Model != null)
        {
            <script>
                drawChart(@Model.ChartData);
            </script>
            <table>
                <tr>
                    <th>Time (min)</th>
                    <th>Waiting Jobs</th>
                    <th>Finished Jobs</th>
                    <th>Running Jobs</th>
                </tr>
                @for (int i = 0; i < Model.Result.QueueDepths.Count; i += 5)
                {
                    <tr>
                        <td>@i</td>
                        <td>@Model.Result.QueueDepths[i]</td>
                        <td>@Model.Result.Finished[i]</td>
                        <td>@Model.Result.Running[i]</td>
                    </tr>
                }
            </table>
        }
    </div>
</body>

</html>